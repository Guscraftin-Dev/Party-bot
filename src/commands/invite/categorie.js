const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const { Party } = require("../../dbObjects");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("categorie")
        .setDescription("Pour g√©rer cette cat√©gorie !")
        .setDMPermission(false)
        .addSubcommand(subcommand =>
            subcommand.setName("quitter")
                .setDescription("üë§„Ä¢Pour quitter cette soir√©e (cette cat√©gorie)."))
        .addSubcommand(subcommand =>
            subcommand.setName("supprimer")
                .setDescription("üéâ„Ä¢Pour supprimer cette soir√©e (sa cat√©gorie).")),

    async execute(interaction) {
        const party = await Party.findOne({ where: { category_id: interaction.channel.parentId, organizer_id: interaction.member.id } });

        const leaveButton = new ButtonBuilder()
            .setCustomId("leaveCate")
            .setLabel("Quitter cette soir√©e !")
            .setStyle(ButtonStyle.Danger);

        const deletedButton = new ButtonBuilder()
            .setCustomId("deletedCate")
            .setLabel("Supprimer cette soir√©e !")
            .setStyle(ButtonStyle.Danger);

        switch (interaction.options.getSubcommand()) {
            /**
             * Leave the party only if the user is not the main organizer
             */
            case "quitter":
                if (party) {
                    return interaction.reply({
                        content: `Tu ne peux pas quitter ta propre soir√©e ? (\`${interaction.channel.parent.name}\`)\n\nSi c'est une erreur, tape cette commande \`/categorie supprimer\`.`,
                        ephemeral: true,
                    });
                } else {
                    return interaction.reply({
                        content: `Es-tu s√ªr de vouloir quitter cette soir√©e ? (\`${interaction.channel.parent.name}\`)\n\nSi c'est une erreur, rejete ce message pour √©viter de cliquer sur le bouton rouge de d√©part.`,
                        ephemeral: true,
                        components: [new ActionRowBuilder().addComponents(leaveButton)],
                    });
                }

            /**
             * Delete the party only if the user is the main organizer
             */
            case "supprimer":
                if (!party) {
                    return interaction.reply({
                        content: "Tu dois √™tre l'organisateur de cette soir√©e (de cette cat√©gorie) pour pouvoir g√©rer les invit√©s !\nSi tu es organisateur et que tu veux g√©rer tes invit√©s, tape cette commande dans la cat√©gorie de ta soir√©e.",
                        ephemeral: true,
                    });
                } else {
                    return interaction.reply({
                        content: `Es-tu s√ªr de vouloir supprimer cette soir√©e ? (\`${interaction.channel.parent.name}\`)` +
                        "\n\nSi c'est une erreur, rejete ce message pour √©viter de cliquer sur le bouton rouge de suppression.",
                        ephemeral: true,
                        components: [new ActionRowBuilder().addComponents(deletedButton)],
                    });
                }

            default:
                return interaction.reply({
                    content: "Votre commande a recontr√©e des probl√®mes, contacter l'administrateur !",
                    ephemeral: true,
                });
        };
    },
};
